#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <stdio.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>
#include <sys/select.h>
#include <errno.h>
#define LISTENQ 10
#define MAXLINE 1024
#define PING 100

int open_listenfd_http(int http_port);
int open_listenfd_udp(int udp_port);
void echo_http(int connfd);

int main(int argc, char **argv) 
{
  int listenfd_http;
  int listenfd_udp; 
  int maxfdp1; 
  int connfd_http;
  int connfd_udp;
  int http_port;
  int udp_port;
  int clientlen_http;
  int clientlen_udp;
  int childpid_http = 0;
  int childpid_udp = 0;
  uint32_t conversion_num; //for ntohl and htonl
  char buf[PING];
  socklen_t len; 
  int retval;
  struct sockaddr_in clientaddr_http;
  struct sockaddr_in clientaddr_udp;
  struct sockaddr_in serveraddr;
  struct hostent *hp;

  fd_set rfds;

  char *haddrp;
  
  if (argc != 3)
  {
  printf("usage: ./multi_serivce_server <http service port> <ping service port>\n");
   return 1;
  }

  http_port = atoi(argv[1]); /* the server listens on a port passed 
			   on the command line */
  udp_port = atoi(argv[2]);
  
  listenfd_http = open_listenfd_http(http_port); //SOCKET, BIND, LISTEN 
  listenfd_udp = open_listenfd_udp(udp_port);

 while (1) 
{
    FD_ZERO(&rfds);
    FD_SET(listenfd_http, &rfds);
    FD_SET(listenfd_udp, &rfds);
    maxfdp1 = (listenfd_http > listenfd_udp) ? listenfd_http+1 : listenfd_udp+1; 
   
    retval = select(maxfdp1, &rfds, NULL, NULL, NULL);

    if (FD_ISSET(listenfd_http, &rfds))
    {
      clientlen_http = sizeof(clientaddr_http); 
      connfd_http = accept(listenfd_http, (struct sockaddr *)&clientaddr_http, &clientlen_http);
      
      if ((childpid_http = fork()) == 0)
      {
      close(listenfd_http); 
      echo_http(connfd_http);
      exit(0);
      }

      close(connfd_http);
    }
    
    else if ((FD_ISSET(listenfd_udp, &rfds)))
    {
      int n; 
      n = recvfrom(listenfd_udp, buf, PING, 0, (struct sockaddr *)&clientaddr_udp, &len);
      conversion_num = ntohl(*((uint32_t *)buf)); //NETWORK TO HOST LONG
      conversion_num += 1; //INCREMENT
      *((uint32_t *)buf) = htonl(conversion_num); //HOST TO NETWORK LONG
      sendto(listenfd_udp, buf, n, 0, (struct sockaddr *)&clientaddr_udp, len);
    }
 }
    return 0; 
}

int open_listenfd_http(int http_port)  
{ 
  int listenfd, optval=1; 
  struct sockaddr_in serveraddr; 
   
  /* Create a socket descriptor */ 
  if ((listenfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
    return -1; 
  
  /* Eliminates "Address already in use" error from bind. */ 
  if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR,  
		 (const void *)&optval , sizeof(int)) < 0) 
    return -1; 
 
  /* Listenfd will be an endpoint for all requests to port 
     on any IP address for this host */ 
  bzero((char *) &serveraddr, sizeof(serveraddr)); 
  serveraddr.sin_family = AF_INET;  
  serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);  
  serveraddr.sin_port = htons((unsigned short)http_port);  
  if (bind(listenfd, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) < 0) 
    return -1; 
 
  /* Make it a listening socket ready to accept 
     connection requests */ 
  if (listen(listenfd, LISTENQ) < 0) 
    return -1; 
 
  return listenfd; 
} 

int open_listenfd_udp(int udp_port)
{
  int listenfd = -1;
  int optval = 1;
  struct sockaddr_in serveraddr;

  if ((listenfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0)
    return -1;
  /* Eliminates "Address already in use" error from bind. */
  if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&optval , sizeof(int)) < 0)
    return -1; 
  /* Listenfd will be an endpoint for all requests to port
     on any IP address for this host */
  bzero((char *) &serveraddr, sizeof(serveraddr));
  serveraddr.sin_family = AF_INET;
  serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);
  serveraddr.sin_port = htons((unsigned short)udp_port);
  if (bind(listenfd, (struct sockaddr *)&serveraddr, sizeof(serveraddr)) < 0)
    return -1;
  return listenfd;
}

void echo_http(int connfd)
{
  char buf[MAXLINE];
  char * path;
  int filestatus;
  FILE * fd;

  read(connfd, buf, MAXLINE);
  path = strtok(buf, " ");
  path = strtok(NULL, " ");
  path++; 

  if (access(path, R_OK) == 0)
    {
      write(connfd, "HTTP/1.0 200 OK\r\n\r\n", strlen("HTTP/1.0 200 OK\r\n\r\n"));
      fd = fopen(path, "r");
      while (!feof(fd))
	{
	  memset(buf,0,MAXLINE);
	  fread(buf, sizeof(char), MAXLINE-1, fd);
	  write(connfd, buf, strlen(buf));
	}
      fclose(fd);
    }
  else
    {
      if (errno != EACCES)
	{
	write(connfd, "HTTP/1.0 404 Not Found\r\n\r\n", strlen("HTTP/1.0 404 Not Found\r\n\r\n"));
	}
      else
	{
	  write(connfd, "HTTP/1.0 403 Forbidden\r\n\r\n", strlen("HTTP/1.0 403 Forbidden\r\n\r\n"));
	}
    } 
  
} 

